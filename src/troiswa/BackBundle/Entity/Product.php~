<?php

namespace troiswa\BackBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use Gedmo\Mapping\Annotation as Gedmo;

/**
 * Product
 *
 * @ORM\Table(name="product")
 * @ORM\Entity(repositoryClass="troiswa\BackBundle\Entity\ProductRepository")
 */
class Product
{
    /**
     * @var integer
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string
     *
     * @Assert\NotBlank(message=" Champ obligatoire ")
     * @Assert\Length(
     *      min = "2",
     *      max = "100",
     *      minMessage = "le nom de l'article doit etre minimum de {{ limit }} caractères",
     *      maxMessage = "le nom de l'article doit etre maximum de {{ limit }} caractères"
     * )
     * @ORM\Column(name="title", type="string", length=100)
     */
    private $title;

    /**
     * @var string
     * @Assert\NotBlank(message=" Champ obligatoire ")
     * @Assert\Length(
     *      min = "20",
     *      max = "1000",
     *      minMessage = "la description de l'article doit etre minimum de {{ limit }} caractères",
     *      maxMessage = "la description de l'article doit etre maximum de {{ limit }} caractères"
     * )
     * @ORM\Column(name="description", type="text")
     */
    private $description;

    /**
     * @var float
     * @Assert\NotBlank(message=" Champ obligatoire ")
     * @Assert\Type(type="float", message="La valeur {{ value }} n'est pas un type {{ type }} valide.")
     * @Assert\GreaterThanOrEqual(
     *     value = 0
     * )
     * @ORM\Column(name="price", type="float")
     */
    private $price;

    /**
     * @var boolean
     * @Assert\NotBlank(message=" Champ obligatoire ")
     *
     * @ORM\Column(name="active", type="boolean")
     */
    private $active;

    /**
     * @var integer
     * @Assert\NotBlank(message=" Champ obligatoire ")
     *
     * @Assert\GreaterThanOrEqual(
     *     value = 0
     * )
     * @ORM\Column(name="quantity", type="integer")
     */
    private $quantity;


    /**
     * @ORM\ManyToOne(targetEntity="troiswa\BackBundle\Entity\Category", inversedBy="products")
     *
     * incersed coté maitre et mappedby coté esclave sont nécéssaire pour le bidirectionnel
     *
     * Pour le many to one , le coté maitre et l'endroit ou on a la clé étrangère
     * ici l'entité produit aurra une clé étrangère $categ (categorie_id), prooduit sera maitre
     *
     * paramètres: change la clé nommée automatiquement par celle que l'on veux , ici transforme categ_id en id category
     * @ORM\JoinColumn(name="id_category",referencedColumnName="id")
     */
    private $categ;


    /**
     * @ORM\ManyToOne(targetEntity="troiswa\BackBundle\Entity\Brand", inversedBy="products")
     * @ORM\JoinColumn(name="id_brand",referencedColumnName="id")
     */
    private $brand;

    // cette fonction permet a l'entité d'etre automatiquement sélectioné a true dans le choice/radio
    public function __construct()
    {
        $this->active = true;
    }


    /**
     * @Gedmo\Slug(fields={"title","id"}, updatable=false)
     * @ORM\Column(length=128, unique=true )
     */
    private $slug;


    /**
     * @var \DateTime $created
     *
     * @Gedmo\Timestampable(on="create")
     * @ORM\Column(type="datetime")
     *
     */
    private $created;

    /**
     * @var \DateTime $updated
     *
     * @Gedmo\Timestampable(on="update")
     * @ORM\Column(type="datetime")
     */
    private $updated;


    /**
     * Get id
     *
     * @return integer 
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set title
     *
     * @param string $title
     * @return Product
     */
    public function setTitle($title)
    {
        $this->title = $title;

        return $this;
    }

    /**
     * Get title
     *
     * @return string 
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * Set description
     *
     * @param string $description
     * @return Product
     */
    public function setDescription($description)
    {
        $this->description = $description;

        return $this;
    }

    /**
     * Get description
     *
     * @return string 
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Set price
     *
     * @param float $price
     * @return Product
     */
    public function setPrice($price)
    {
        $this->price = $price;

        return $this;
    }

    /**
     * Get price
     *
     * @return float 
     */
    public function getPrice()
    {
        return $this->price;
    }

    /**
     * Set active
     *
     * @param boolean $active
     * @return Product
     */
    public function setActive($active)
    {
        $this->active = $active;

        return $this;
    }

    /**
     * Get active
     *
     * @return boolean 
     */
    public function getActive()
    {
        return $this->active;
    }

    /**
     * Set quantity
     *
     * @param integer $quantity
     * @return Product
     */
    public function setQuantity($quantity)
    {
        $this->quantity = $quantity;

        return $this;
    }

    /**
     * Get quantity
     *
     * @return integer 
     */
    public function getQuantity()
    {
        return $this->quantity;
    }

    /**
     * Set slug
     *
     * @param string $slug
     * @return Product
     */
    public function setSlug($slug)
    {
        $this->slug = $slug;

        return $this;
    }

    /**
     * Get slug
     *
     * @return string 
     */
    public function getSlug()
    {
        return $this->slug;
    }


    /**
     * Set created
     *
     * @param \DateTime $created
     * @return Product
     */
    public function setCreated($created)
    {
        $this->created = $created;

        return $this;
    }

    /**
     * Get created
     *
     * @return \DateTime 
     */
    public function getCreated()
    {
        return $this->created;
    }

    /**
     * Set updated
     *
     * @param \DateTime $updated
     * @return Product
     */
    public function setUpdated($updated)
    {
        $this->updated = $updated;

        return $this;
    }

    /**
     * Get updated
     *
     * @return \DateTime 
     */
    public function getUpdated()
    {
        return $this->updated;
    }


    /**
     * Set categ
     *
     * @param \troiswa\BackBundle\Entity\Category $categ
     * @return Product
     */
    public function setCateg(\troiswa\BackBundle\Entity\Category $categ = null)
    {
        $this->categ = $categ;

        return $this;
    }

    /**
     * Get categ
     *
     * @return \troiswa\BackBundle\Entity\Category 
     */
    public function getCateg()
    {
        return $this->categ;
    }



    // methode magique pour convertir un objet en chaine de charactère
    // exemple d'erreur causé si on utilise pas cette methode :
    // Catchable Fatal Error: Object of class troiswa\BackBundle\Entity\Category could not be converted to string

    // doc : http://symfony.com/fr/doc/current/reference/forms/types/entity.html
    public function __toString()
    {
        return $this->title;
    }



    /**
     * Set brand
     *
     * @param \troiswa\BackBundle\Entity\Brand $brand
     * @return Product
     */
    public function setBrand(\troiswa\BackBundle\Entity\Brand $brand = null)
    {
        $this->brand = $brand;

        return $this;
    }

    /**
     * Get brand
     *
     * @return \troiswa\BackBundle\Entity\Brand 
     */
    public function getBrand()
    {
        return $this->brand;
    }
}
